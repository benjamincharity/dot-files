set nocompatible
set shell=/bin/sh
"silent! call pathogen#runtime_append_all_bundles()

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'fugitive.vim'
Bundle 'The-NERD-Commenter'
Bundle 'scrooloose/nerdtree'
Bundle 'ack.vim'
Bundle 'rails.vim'
Bundle 'surround.vim'
Bundle 'ZoomWin'
Bundle 'Command-T'
Bundle 'rvm.vim'
Bundle 'bufexplorer.zip'
Bundle 'javaScriptLint.vim'
Bundle 'vim-coffee-script'
Bundle 'scratch.vim'
Bundle 'vim-scripts/EasyGrep'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'vim-scripts/EasyGrep'
Bundle 'mileszs/ack.vim'
Bundle 'vim-scripts/Align'

" Github repos
Bundle 'msanders/snipmate.vim'
"Bundle "MarcWeber/vim-addon-mw-utils"
"Bundle "tomtom/tlib_vim"
"Bundle "garbas/vim-snipmate"
Bundle 'mattn/zencoding-vim'
Bundle 'tpope/vim-surround'
Bundle 'juvenn/mustache'
Bundle 'slim-template/vim-slim'
"Bundle 'rstacruz/sparkup'

syntax on
filetype plugin indent on

set showcmd
set showmode

set backspace=indent,eol,start

set clipboard=unnamed
set t_Co=256

set hidden

set wildmenu
set wildmode=list:longest

set ignorecase
set smartcase

set number
set ruler

set incsearch
set hlsearch
set showmatch

set cursorline
set cursorcolumn
set listchars=tab:>\ ,trail:â€¢,extends:>,precedes:<,nbsp:+
set list

set wrap
set scrolloff=3

set title

set visualbell

set nobackup
set nowritebackup
set backupdir=~/.vim_backups//
set directory=~/.vim_backups//

set foldmethod=indent
set foldlevelstart=20

" Allow arrow key use in insert mode
set nocompatible

" Allow arrow key use in insert mode
set nocompatible

" quickly open vimrc
nmap <silent> <leader>ev :e $MYVIMRC<cr>
" quickly source vimrc
nmap <silent> <leader>sv :so $MYVIMRC<cr>

" Command-T configuration
let g:CommandTMaxHeight=20

"Pane resize
nnoremap OA <C-w>+
nnoremap OB <C-w>-
nnoremap OC <C-w>>
nnoremap OD <C-w><

"Theme
color dusk

" I don't understand vundle enough quite yet; even though Bundle 'Align' is above, exists(":AlignCtrl") never passed during .vimrc
" So to hack around this for now I lazy-config Align otf.
function! MyAlignConfig()
    " auto-align: left justify (l), first sep only (:), 1 sp on either side of
    " separator (p1P1), preserve leading whitespace so we don't break indenting (W)
    " works for = and =>
    AlignCtrl =l:p1P1W =>\? :
endfunction
vmap + :call MyAlignConfig()<CR>gv :Align<CR>

"Move lines with alt + direction
nnoremap âˆ† :m+<CR>==
nnoremap Ëš :m-2<CR>==
vnoremap âˆ† :m'>+<CR>gv=gv
vnoremap Ëš :m-2<CR>gv=gv

"Autoindent
set cindent
set smartindent
set autoindent
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2

"Set to auto read when a file is changed from the outside
set autoread

set laststatus=2
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{rvm#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

"NERDTree

"Toggle NERDTree
noremap <C-T> :NERDTreeToggle<CR>

"Make bookmarks Visible
let NERDTreeShowBookmarks = 1

"Enable Colors
let NERDChristmasTree = 1
"
"Get rid of trailing spaces
nmap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

"Turn cursor column on for haml and sass
"autocmd BufEnter *.erb setlocal cursorcolumn

au BufNewFile,BufRead Gemfile set filetype=ruby
au BufNewFile,BufRead *.j set filetype=objj
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.as set filetype=actionscript

"un-highlight searched text
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

"Show Registerr
map <leader>rr :reg<cr>

" Reload snippets
fun! ReloadSnippets(snippets_dir, ft)
  call ResetSnippets()
  call GetSnippets(a:snippets_dir, a:ft)
endfun

let snippets_dir="~/.dot-files/snippets"
map <leader>rs :call ReloadSnippets(snippets_dir, &ft)<cr>

" Remap these since I always seem to type this.
com! W w
com! Wa wa

:nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>

" Zen Coding
let g:user_zen_expandabbr_key = '<c-e>'
let g:use_zen_complete_tag = 1
let g:user_zen_settings = {'html' : {'indentation' : '  '},}

" Rspec goodness!!!
function! RunSpec(args)
 let cmd = ":! rspec % -cfn --drb " . a:args
 execute cmd
endfunction

" run one rspec example or describe block based on cursor position
map !s :call RunSpec("-l " . <C-r>=line('.')<CR>)
" run full rspec file
map !S :call RunSpec("")<CR>

" patrick's keybindings
map Q gq
map <leader><cr> :noh<CR>
map <leader>d :NERDTreeToggle<CR>
map <C-l> :tabn<CR>
map <C-h> :tabp<CR>
map <C-n> :tabnew<CR>
map <leader>f :echo @%<CR>
map <C-t> :TlistToggle<cr>

" override the line highlight styles
highlight cursorline term=NONE, cterm=NONE, guibg=#444444, ctermbg=235
highlight cursorcolumn guibg=#444444, ctermbg=235

" allow gist.vim to use copy/paste
let g:gist_clip_command = 'pbcopy'

" Needed for JSLint
filetype plugin on

" Sort CSS styles inside {} by hitting F7
map <F7> :g#\({\n\)\@<=#.,/}/sort<CR>


" show error background on text longer than 80 characters
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%>80v.\+/

"##############################################
" Easier split navigation
"##############################################

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" auto reload vimrc when written to
autocmd! bufwritepost ~/.vimrc source ~/.vimrc
autocmd! bufwritepost vimrc source vimrc
