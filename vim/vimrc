set nocompatible
set shell=/bin/sh




" # # # # # # # # # # # # # # # # #
"
" Set up Vundler
"
" # # # # # # # # # # # # # # # # #

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'gmarik/vundle'
Plugin 'fugitive.vim'
Plugin 'The-NERD-Commenter'
Plugin 'scrooloose/nerdtree'
Plugin 'surround.vim'
Plugin 'ZoomWin'
Plugin 'rvm.vim'
Plugin 'bufexplorer.zip'
Plugin 'javaScriptLint.vim'
Plugin 'vim-coffee-script'
Plugin 'scratch.vim'
Plugin 'vim-scripts/EasyGrep'
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/Align'
Plugin 'msanders/snipmate.vim'
Plugin 'tpope/vim-surround'
Plugin 'juvenn/mustache'
Plugin 'slim-template/vim-slim'
Plugin 'Raimondi/delimitMate'
Plugin 'majutsushi/tagbar'
Plugin 'mattn/emmet-vim'
Plugin 'gregsexton/MatchTag'
Plugin 'dkprice/vim-easygrep'
Plugin 'kien/ctrlp.vim'




" # # # # # # # # # # # # # # # # #
"
" Helper Functions
"
" # # # # # # # # # # # # # # # # #

" I don't understand vundle enough quite yet; even though Bundle 'Align' is above, exists(":AlignCtrl") never passed during .vimrc
" So to hack around this for now I lazy-config Align otf.
function! MyAlignConfig()
    " auto-align: left justify (l), first sep only (:), 1 sp on either side of
    " separator (p1P1), preserve leading whitespace so we don't break indenting (W)
    " works for = and =>
    AlignCtrl =l:p1P1W =>\? :
endfunction
vmap + :call MyAlignConfig()<CR>gv :Align<CR>

" Rspec goodness!!!
function! RunSpec(args)
 let cmd = ":! rspec % -cfn --drb " . a:args
 execute cmd
endfunction

" mouse support
" http://www.reasonablyopinionated.com/2011/11/mouse-support-for-terminalapp-scrolling.html
if has("mouse") && !has("gui_macvim")
    set mouse=a
    set ttymouse=xterm2
    function! ToggleMouse()
        let m = &mouse
        if m ==# 'a'
            execute ":set mouse="
        else
            execute ":set mouse=a"
        endif
    endfunction
    map <Leader>m :call ToggleMouse()<CR>
endif

" auto reload vimrc when written to
autocmd! bufwritepost ~/.vimrc source ~/.vimrc
autocmd! bufwritepost vimrc source vimrc

" needed to wrap these commands like this for some reason...
" see: http://stackoverflow.com/questions/395114/vim-syntax-coloring-how-do-i-highlight-long-lines-only/10993757#10993757
augroup vimrc_autocmds
  autocmd BufEnter * highlight OverLength ctermbg=red ctermfg=white guibg=#592929
  autocmd BufEnter * match OverLength /\%80v.*/
augroup END



" # # # # # # # # # # # # # # # # #
"
" Settings
"
" # # # # # # # # # # # # # # # # #

"Theme
color dusk

syntax on
filetype plugin indent on
" Needed for JSLint
filetype plugin on
set showcmd
set showmode
set backspace=indent,eol,start
set clipboard=unnamed
set t_Co=256
set hidden
set wildmenu
set wildmode=list:longest
set ignorecase
set smartcase
set number
set ruler
set incsearch
set hlsearch
set showmatch
set cursorline
set cursorcolumn
set listchars=tab:>\ ,trail:•,extends:>,precedes:<,nbsp:+
set list
set wrap
set scrolloff=3
set title
set visualbell
set nobackup
set nowritebackup
set backupdir=~/.vim/swap_files/
set directory=~/.vim/swap_files/
set foldmethod=indent
set foldlevelstart=99
" Allow arrow key use in insert mode
set nocompatible
" Allow arrow key use in insert mode
set nocompatible
" Autoindent
set cindent
set smartindent
set autoindent
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
"Set to auto read when a file is changed from the outside
set autoread
set laststatus=2
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{rvm#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
"Make bookmarks Visible
let NERDTreeShowBookmarks = 1
"Enable Colors
let NERDChristmasTree = 1
" Open NERDTree when vim opens
"autocmd vimenter * NERDTree
" Define snippets location
let snippets_dir="~/.dot-files/snippets"
" Zen Coding
"let g:user_zen_expandabbr_key = '<c-e>'
"let g:use_zen_complete_tag = 1
"let g:user_zen_settings = {'html' : {'indentation' : '  '},}
" Emmet
let g:user_emmet_leader_key='<C-e>'
" Set the filetype for various file extensions
au BufNewFile,BufRead Gemfile set filetype=ruby
au BufNewFile,BufRead *.j set filetype=objj
au BufNewFile,BufRead *.md set filetype=markdown
au BufNewFile,BufRead *.as set filetype=actionscript
au BufNewFile,BufRead *.php set filetype=html
au BufNewFile,BufRead *.cshtml set filetype=html
" Turn on spell check in markdown files
au BufNewFile,BufRead *.md setlocal spell spelllang=en_us
au BufNewFile,BufRead *.mdown setlocal spell spelllang=en_us
au BufNewFile,BufRead *.markdown setlocal spell spelllang=en_us
" override the line highlight styles
highlight cursorline term=NONE, cterm=NONE, guibg=#444444, ctermbg=235
highlight cursorcolumn guibg=#444444, ctermbg=235
" allow gist.vim to use copy/paste
let g:gist_clip_command = 'pbcopy'
" Command-T configuration
let g:CommandTMaxHeight=20
" Turn on autocomplete for spelling
set complete+=kspell
" Define spelling error highlighting
hi SpellBad ctermfg=015 ctermbg=000 cterm=none guifg=#FE2E2E guibg=#F8E0E0 gui=none
" Fire up CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim



" # # # # # # # # # # # # # # # # #
"
" Command Remapping
"
" # # # # # # # # # # # # # # # # #

" Remap the leader key to the spacebar
" http://karmanebula.com/technically-borked/2013/12/16/leader-key-as-space-capslock-as-esc
let mapleader=" "
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>v :vsplit
nnoremap <Leader>s :split
nnoremap <Leader>8 :set tw=80<CR>
nnoremap <Leader>0 :set tw=0<CR>
nnoremap <Leader>n :set invnumber<CR>
" Command T additions
noremap <leader>o <Esc>:CommandT<CR>
noremap <leader>O <Esc>:CommandTFlush<CR>
noremap <leader>tb <Esc>:CommandTBuffer<CR>
" Open tagbar
nmap <F8> :TagbarToggle<CR>
"Move lines with alt + direction
nnoremap ∆ :m+<CR>==
nnoremap ˚ :m-2<CR>==
vnoremap ∆ :m'>+<CR>gv=gv
vnoremap ˚ :m-2<CR>gv=gv
" Tab mappings.
"map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove
" quickly open vimrc
nmap <silent> <leader>ev :e $MYVIMRC<cr>
" quickly source vimrc
nmap <silent> <leader>sv :so $MYVIMRC<cr>
"Toggle NERDTree
noremap <C-T> :NERDTreeToggle<CR>
"Get rid of trailing spaces
nmap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
"Show Registerr
map <leader>rr :reg<cr>
" Quickly reload our snippets
map <leader>rs :call ReloadSnippets(&filetype)<cr>
" Remap these since I always seem to type the wrong command in haste.
com! W w
com! Wa wa
com! WA wa
" open the file in marked.app
:nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>
" open the file in Chrome
:nnoremap <leader>C :silent !open -a 'Google Chrome.app' '%:p'<cr>
" run one rspec example or describe block based on cursor position
map !s :call RunSpec("-l " . <C-r>=line('.')<CR>)
" run full rspec file
map !S :call RunSpec("")<CR>
" patrick's keybindings
map Q gq
map <leader><cr> :noh<CR>
map <leader>d :NERDTreeToggle<CR>
"map <C-n> :tabnew<CR>
map <leader>f :echo @%<CR>
map <C-t> :TlistToggle<cr>
" Sort CSS styles inside {} by hitting F7
map <F7> :g#\({\n\)\@<=#.,/}/sort<CR>
" Align according to `:`
map <F6> :Align :<CR>
" FROM ALAN
" for moving between split windows with ease:
map <C-j> <C-w>j<C-w>80+ " up one window, maximized
map <C-k> <C-w>k<C-w>80+ " down one window, maximized
map <C-i> <C-w>= " all windows equal height
map <tab> <C-w>80+ " maximize current window
" Use ctrl-[hjkl] to select the active split!
"nmap <silent> <c-k> :wincmd k<CR>
"nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>
" shortcut to compile coffeescript to scratch buffer
map <leader>cp :CoffeeCompile vert<cr>
" turn off search phrase highlighting until next search
nnoremap <C-S> :set hlsearch!<CR>




