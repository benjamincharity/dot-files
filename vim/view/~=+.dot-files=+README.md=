let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <S-BS> <Plug>delimitMateS-BS
imap <buffer> <BS> <Plug>delimitMateBS
nnoremap <buffer> <silent>   :call markdown#SwitchStatus()
nnoremap <buffer>  e :MarkdownEditBlock
vnoremap <buffer>  e :MarkdownEditBlock
nnoremap <buffer> <silent>  ft :call markdown#FormatTable()
vmap <buffer> [] <Plug>(Markdown_MoveToPreviousSiblingHeader)
vmap <buffer> [[ <Plug>(Markdown_MoveToPreviousHeader)
nmap <buffer> [] <Plug>(Markdown_MoveToPreviousSiblingHeader)
nmap <buffer> [[ <Plug>(Markdown_MoveToPreviousHeader)
vmap <buffer> ]c <Plug>(Markdown_MoveToCurHeader)
vmap <buffer> ]u <Plug>(Markdown_MoveToParentHeader)
vmap <buffer> ][ <Plug>(Markdown_MoveToNextSiblingHeader)
vmap <buffer> ]] <Plug>(Markdown_MoveToNextHeader)
nmap <buffer> ]c <Plug>(Markdown_MoveToCurHeader)
nmap <buffer> ]u <Plug>(Markdown_MoveToParentHeader)
nmap <buffer> ][ <Plug>(Markdown_MoveToNextSiblingHeader)
nmap <buffer> ]] <Plug>(Markdown_MoveToNextHeader)
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer>  <Plug>delimitMateBS
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
inoremap <buffer> <silent> | |:call markdown#FormatTable()a
imap <buffer> } <Plug>delimitMate}
iabbr <buffer> :-) :smile:
iabbr <buffer> :-D :laughing:
iabbr <buffer> :-( :disappointed:
iabbr <buffer> ... â€¦
iabbr <buffer> << Â«
iabbr <buffer> >> Â»
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i,kspell
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal cursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'mkd'
setlocal filetype=mkd
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=Foldexpr_markdown(v:lnum)
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=NeatFoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetMkdIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal list
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=2
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en_us
setlocal statusline=%!airline#statusline(2)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'mkd'
setlocal syntax=mkd
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 11 - ((10 * winheight(0) + 28) / 56)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
11
normal! 01|
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
