#########################################
#
# Utilities
#
#########################################
#
# Disable tslint for a specific rule
snippet disable "Disable TSLint for a specific rule"
/* tslint:disable:${1:camelcase} */
/* tslint-enable: $1 */
endsnippet
# Get Element by ID
snippet gett
document.getElementById('${1}');${2}
endsnippet
# Function comment
snippet funcom "Create a function comment" m
/**
 * ${1:make() returns a new element}
 *
 * ${2:@param {Object} moment}
 * ${3:@return {String} name}
 */${4}
endsnippet



#########################################
#
# Angular 2 TypeScript
#
#########################################
# Converted from: https://github.com/mhartington/vim-angular2-snippets
# Originals: https://github.com/johnpapa/vscode-angular2-snippets

# Create component
snippet ng2-component "Create component" m
import { Component, OnInit } from '@angular/core';

@Component({
	moduleId: module.id,
	selector: '${1:selector}',
	templateUrl: '${2:name}.component.html'
})
export class ${3:ComponentName}Component implements OnInit {
	constructor() { }

	ngOnInit() { }

}
endsnippet
# Create service
snippet ng2-service "Create service" m
import { Injectable } from '@angular/core';

@Injectable()
export class ${1:ServiceName}Service {

	constructor() { }

}
endsnippet
# Create pipe
snippet ng2-pipe "Create pipe" m
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
	name: '${1:name}'
})

export class ${2:PipeName}Pipe implements PipeTransform {
	transform(value: any, args: any[]): any {

	}
}
endsnippet
# Create routes
snippet ng2-routes "Create routes" m
@Routes([
	{ path: '/${1:path}', component: ${2:Component} }${3}
])
endsnippet
# Create route path
snippet ng2-route-path "Create route path" m
{ path: '/${1:path}', component: ${2:Component} }${3}
endsnippet
# Create http get
snippet ng2-http-get "Create http.get" m
return this.http.get('${1:url}')
.map((res: Response) => res.json());
endsnippet
# Service subscribe
snippet ng2-subscribe "Service subscribe" m
this.${1:service}.${2:function}
.subscribe(${3:arg} => this.${4:property} = ${5:arg});
endsnippet
# Create module bootstrap
snippet ng2-bootstrap "Bootstrap module" m
import { enableProdMode } from '@angular/core';
import { bootstrap } from '@angular/platform-browser-dynamic';

import { ${1:AppComponent} } from './${2:name}.component';

// enableProdMode();

bootstrap(${3:AppComponent})
	.then(success => console.log('Bootstrap success'))
	.catch(error => console.log(error));
endsnippet
# Root component
snippet ng2-component-root "Root component" m
import { Component } from '@angular/core';
import { HTTP_PROVIDERS } from '@angular/http';
import { Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';
import 'rxjs/Rx'; // load the full rxjs

@Component({
	moduleId: module.id,
	selector: '${1:selector}',
	templateUrl: '${2:name}.component.html',
	directives: [ROUTER_DIRECTIVES],
	providers: [
		HTTP_PROVIDERS,
		ROUTER_PROVIDERS
	]
})
@Routes([

])
export class AppComponent {}
endsnippet
###
# Custom Angular2 Snippets
##
# import
snippet import "Import component"
import { ${1:NgModule} } from '${2:@angular/core}';
endsnippet
# import Angular Material
snippet importa "Import Angular Material component"
import { ${1:MdToolbar} } from '@angular/material/${2:toolbar}';
endsnippet


#########################################
#
# ES6 promise
#
#########################################
snippet promise "Create a standard ES6 Promise"
return new Promise((resolve, reject) => {
	resolve();
	reject();
});
endsnippet


#########################################
#
# Console Logs
#
#########################################
snippet cl
console.log('${1:Item}: ', ${2:results});${3}
endsnippet
snippet cls
console.log('${1:Log this}');${2}
endsnippet
snippet cln
console.log(JSON.stringify(${1:array}, null, 2));${2}
endsnippet
snippet cw
console.warn('${1:Item}: ', ${2:error});${3}
endsnippet
snippet ce
console.error('${1:Item}: ', ${2:error});${3}
endsnippet
#########################################
#
# if
#
#########################################
snippet if
if (${1:true}) {
	${2}
}
endsnippet
#########################################
#
# if ... else
#
#########################################
snippet ife
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet
#########################################
#
# Ternary conditional
#
#########################################
snippet ift
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
snippet ternary
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
#########################################
#
# Set Timeout
#
#########################################
snippet timeout
setTimeout(() => {
	${3}
}${2}, ${1:10});
endsnippet

