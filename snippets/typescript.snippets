#########################################
#
# Utilities
#
#########################################
#
# Disable tslint for a specific rule
snippet disable "Disable TSLint for a specific rule" m
// tslint:disable: ${1:camelcase}
// tslint:enable: $1
endsnippet
# Disabled tslint for the following line
snippet disableline "Disable TSLint for the following line" m
// tslint:disable-next-line
endsnippet
# Ignore else path for Istanbul test reporter
snippet ignoreelse "Istanbul coverage: ignore 'else' path" m
// istanbul ignore else
endsnippet
# Get Element by ID
snippet gett "Get element by ID" m
document.getElementById('${1}');${2}
endsnippet
# Function comment
snippet mcom "JSDoc method comment" m
/**
 * ${1:Return the difference in time in words}
 *
 * @param ${2:time} - ${3:The time chosen}
 * @return ${4:The difference in time}
 */${6}
endsnippet
# Function comment ALIAS
snippet funcom "JSDoc method comment" m
/**
 * ${1:Return the difference in time in words}
 *
 * @param ${2:time} - ${3:The time chosen}
 * @return ${4:The difference in time}
 */${5}
endsnippet
snippet com "JSDoc comment" m
/**
 * ${1:TODO}
 */
endsnippet
#########################################
#
# TypeScript
#
#########################################
snippet tsobj "Typings for a basic TypeScript object" m
{[key: string]: any}$1
endsnippet


#########################################
#
# Angular 2 TypeScript
#
#########################################
# Converted from: https://github.com/mhartington/vim-angular2-snippets
# Originals: https://github.com/johnpapa/vscode-angular2-snippets

# Create component
snippet ng2-component "Create Angular component" m
import { Component, OnInit } from '@angular/core';

@Component({
	moduleId: module.id,
	selector: '${1:selector}',
	templateUrl: '${2:name}.component.html'
})
export class ${3:ComponentName}Component implements OnInit {
	constructor() { }

	ngOnInit() { }

}
endsnippet
# Create service
snippet ng2-service "Create Angular service" m
import { Injectable } from '@angular/core';

@Injectable()
export class ${1:ServiceName}Service {

	constructor() { }

}
endsnippet
# Create pipe
snippet ng2-pipe "Create Angular pipe" m
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
	name: '${1:name}'
})

export class ${2:PipeName}Pipe implements PipeTransform {
	transform(value: any, args: any[]): any {

	}
}
endsnippet
# create routes
snippet ng2-routes "Create routes" m
@Routes([
	{ path: '/${1:path}', component: ${2:component} }${3}
])
endsnippet
# create route path
snippet ng2-route-path "Create route path" m
{ path: '/${1:path}', component: ${2:component} }${3}
endsnippet
# create module bootstrap
snippet ng2-bootstrap "Angular bootstraping module" m
import { EnableProdMode } from '@angular/core';
import { Bootstrap } from '@angular/platform-browser-dynamic';

import { ${1:AppComponent} } from './${2:name}.component';

// EnableProdMode();

Bootstrap(${3:AppComponent})
	.then(success => console.log('bootstrap success'))
	.catch(error => console.log(error));
endsnippet
# root component
snippet ng2-component-root "Angular root component" m
import { component } from '@angular/core';
import { http_providers } from '@angular/http';
import { routes, router_directives, router_providers } from '@angular/router';
import 'rxjs/rx'; // load the full rxjs

@Component({
	moduleid: module.id,
	selector: '${1:selector}',
	templateurl: '${2:name}.component.html',
	directives: [router_directives],
	providers: [
		http_providers,
		router_providers
	]
})
@Routes([

])
export class appcomponent {}
endsnippet
###
# custom angular2 snippets
##
# import
snippet import "Import a component" m
import { ${1:NgModule} } from '${2:@angular/core}';
endsnippet
# import angular material
snippet importa "Import an angular material component" m
import { ${1:MatToolBarmodule} } from '@angular/material/${2:toolbar}';
endsnippet
# export
snippet export "Export a component" m
export { ${1:MyModule} } from '${2:./../my-module/my-module}';
endsnippet
# import from @terminus/ui
snippet uiimport "Import a UI component"
import { ts${1:button}module } from './../$3/$3.${2:module}';
`!p t[3] = t[1][:1].lower() + t[1][1:]`
endsnippet
# create @Input
snippet input "Create an @Input declaration" m
@Input()
${3:public} ${1:myvar}: ${2:string};
endsnippet
# create an @input with a setter & getter
snippet inputset "Create an @Input setter & getter" m
@Input()
public set ${1:myInput}(value: ${2:any}) {
	if (!value) {
		return;
	}

	this._$1 = value;
}
public get $1(): $2 {
	return this._$1;
}
private _$1: $2${3};
endsnippet
# create an @input with a setter & getter
snippet inputsetbool "Create an @Input setter & getter for a boolean value" m
@Input()
public set ${1:myInput}(value: ${2:any}) {
	this._$1 = coerceBooleanProperty(value);
}
public get $1(): $2 {
	return this._$1;
}
private _$1: $2${3};
endsnippet
# create @output
snippet output "Create an @Output" m
@Output()
public ${1:myEvent}: EventEmitter<${2:myType}> = new EventEmitter();${3}
endsnippet

#########################################
#
# es6 promise
#
#########################################
snippet promise "Create promise (es6)" m
return new promise((resolve, reject) => {
	resolve();
	reject();
});
endsnippet


#########################################
#
# console logs
#
#########################################
snippet cl "console.log with argument"
console.log('${1:item}: ', $1);${2}
endsnippet
snippet cls "console.log"
console.log('${1:Log this}');${2}
endsnippet
snippet cln "console.log with stringified content"
console.log(JSON.stringify(${1:array}, null, 2));${2}
endsnippet
snippet cw "console.warn with argument"
console.warn('${1:Item}: ', $1);${2}
endsnippet
snippet ce "console.error with argument"
console.error('${1:Item}: ', $1);${2}
endsnippet


#########################################
#
# Returns
#
#########################################
snippet rf "return false;"
return false;
endsnippet
snippet rt "return true;"
return true;
endsnippet
#########################################
#
# if
#
#########################################
snippet if "if statement"
if (${1:true}) {
	${2}
}
endsnippet
#########################################
#
# if ... else
#
#########################################
snippet ife "if/else statement"
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet
#########################################
#
# Ternary conditional
#
#########################################
snippet ift "Ternary if statement"
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
snippet ternary "Ternary if statement"
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
#
# switch
snippet switch "Switch statement" m
switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	default:
		${2:// code}
}
endsnippet
#
# for (...) {...}
snippet for "for loop (es6)" m
for (const ${1:value} of ${2:array}) {
	console.log($1);
}
endsnippet
#
# for (...) {...} (Improved Native For-Loop)
snippet forr "for loop (classic)" m
for (let ${1:i} = 0; $1 < ${2:array}.length; $1 += 1) {
	${4:$2[$1]}
}
endsnippet
#########################################
#
# Set Timeout
#
#########################################
snippet timeout "setTimeout" m
setTimeout(() => {
}, ${1:10});${2}
endsnippet
#########################################
#
# Jasmine / Jest / Testing
#
#########################################
# Describe
snippet describe "Jest 'describe' block" m
describe(\`${1:test block}\`, () => {

});
endsnippet
# it
snippet it "Jasmine 'it' statement" m
it(\`should ${1:do something}\`, () => {
	expect(actual).toEqual(expected);
});
endsnippet
# test (for jest
snippet test "Jest 'test' statement" m
test(\`should ${1:do something}\`, () => {
	expect(actual).toEqual(expected);
});
endsnippet
# Before inject
snippet beforei "Before injector function" m
beforeEach(inject((_${1:serviceToInject}_) => {
	$1 = _$1_;
}));
endsnippet
# Before function
snippet before "Jest 'before' block" m
beforeEach(() => {
	${1}
});
endsnippet
# After
snippet after "Jest 'after' block" m
afterEach(() => {
	${1}
});
endsnippet
# Actual/Expected
snippet actual "Actual / Expected constants"
const actual = ${1};
const expected = ${2};
endsnippet
# Create a spy
snippet spy "Create a Jasmine spy"
jasmine.createSpy('${1:mySpy}')${2}
endsnippet
#########################################
#
# Imports
#
#########################################
snippet lodash "Import all lodash functions"
import * as _ from 'lodash';
endsnippet
snippet moment "Import all momentjs functions"
import * as moment from 'moment';
endsnippet
snippet imof "Import RXJS 'of' method"
import { of } from 'rxjs';
endsnippet
snippet imoperator "Import RXJS operator"
import { ${1:map} } from 'rxjs/operators';
endsnippet
#########################################
#
# Component Snippets
#
#########################################
# Component
# NOTE: The last line uppercases the first letter of the 2nd variable and stores it as the 3rd
# variable
snippet uic "Create a UI component" m
import {
  ChangeDetectionStrategy,
  Component,
  Input,
  Output,
  ViewEncapsulation,
} from '@angular/core';

/**
 * ${1:TODO: This is...}
 *
 * @example
 * <ts-${2:foo}
 *              item="Value"
 * ></ts-$2>
 */
@Component({
	selector: 'ts-$2',
	templateUrl: './$2.component.html',
	styleUrls: ['./$2.component.scss'],
	host: {
		class: 'ts-$2',
	},
	exportAs: 'ts$3',
	changeDetection: ChangeDetectionStrategy.OnPush,
	encapsulation: ViewEncapsulation.None,
})
export class Ts$3Component {

}
`!p t[3] = t[2][:1].upper() + t[2][1:]`
endsnippet
# Module
# NOTE: The last line lowercases the first letter of the 1st variable and stores it as the 2nd
# variable
snippet uim "Create a UI module" m
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
/*
 *import { MatButtonModule } from '@angular/material/button';
 */

import { Ts${1:Foo}Component } from './$2.component';
export { Ts$1Component } from './$2.component';


@NgModule({
  imports: [
    CommonModule,
  ],
  exports: [
    Ts$1Component,
  ],
  declarations: [
    Ts$1Component,
  ],
})
export class Ts$1Module {}
`!p t[2] = t[1][:1].lower() + t[1][1:]`
endsnippet
# Component Test
snippet uict "Create a test for a UI component" m
import { Component } from '@angular/core';
import { TestBed, ComponentFixture, async } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
/*
 *import { MatButtonModule } from '@angular/material/button';
 */

import { Ts${1:Button}Component } from './$2.component';

@Component({
  template: \`
    <div>
      <ts-$2>
	  </ts-$2>
    </div>
  \`,
})
class TestHostComponent {}

describe(\`$1Component\`, () => {

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
      /*
       * MatButtonModule,
       */
      ],
      declarations: [
        Ts$1Component,
        TestHostComponent,
      ],
    })
      .compileComponents().then(() => {
        this.fixture = TestBed.createComponent(Ts$1Component);
        this.component = this.fixture.componentInstance;
      });
  }));


  it(\`should exist\`, () => {
    this.fixture.detectChanges();

    expect(this.component).toBeTruthy();
  });

});
`!p t[2] = t[1][:1].lower() + t[1][1:]`
endsnippet
# Debugger statement for NGRX stream
snippet tapdebug "Add ngrx 'tap' with a debugger statement" m
.tap(() => {
  // tslint:disable-next-line
  debugger;
})
endsnippet
# Fixture.detectChanges
snippet fdc "fixture.detectChanges()" m
fixture.detectChanges();
endsnippet

#########################################
#
# Various
#
#########################################
snippet oassign "Object.assign" m
Object.assign({}, ${1:myObj})$2
endsnippet



#########################################
#
# Snippet Helper Functions
#
#########################################
global !p
def convert(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1-\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1-\2', s1).lower()
endglobal
