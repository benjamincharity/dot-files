#########################################
#
# ES6
#
#########################################
#
# Injector
snippet inject "Injector tag"
'ngInject';
endsnippet
#
# Global
snippet global "ESLint global"
/* global ${1:jQuery} */
endsnippet
#
# Controller Class
snippet controller "Create a controller class" m
export class ${1:App}Controller {

	constructor(
	) {
		'ngInject';


		this._activate();

	}




	_activate() {
		console.log('in $1Controller')
	}

}

endsnippet
#
# Service Class
snippet service "Create a service class" m
export class ${1:App}Service {

	constructor() {
		'ngInject';

	}

}

endsnippet
#
# Directive Class
snippet directive "Create a directive" m
export function ${1:my}Directive(
) {
	'ngInject';

	const directive = {
		restrict: '${2:E}',
		scope: {},
		bindToController: {},
		templateUrl: '${3:/path/to/file}.html',
		link: linkFunction,
		controller: $1Controller,
		controllerAs: 'vm',
	};

	return directive;


	/**
	 * Link
	 */
	function linkFunction($scope, $element, $attrs, vm) {

	}

}


/**
 * Controller
 */
function $1Controller() {

}

endsnippet
#
# Define a directive
snippet $d
angular.module('${1:MyModule}').directive('${2:MyDirective}', function() {

	return {
		restrict: 'E',
		scope: {},
		bindToController: {},
		templateSrc: '${3:/path/to/file}.html',
		link: linkFunction,
		controller: '$2Controller',
		controllerAs: 'vm'
	};


	function linkFunction($scope, $element, $attr, vm) {
	}

	function $2Controller() {
	}

});

endsnippet
#
# Module
snippet module "Create a module (es6)" m
import '../core';

import { ${1:SignIn}RouterConfig } from './signIn.routes';
import { $1Controller } from './signIn.controller';


angular.module('${2:ModuleName}', [
	'dm.core',
])
	.config($1RouterConfig)
	.controller('$1Controller', $1Controller)
;

endsnippet
#
# Router
snippet routes "Create a router file (es6)" m
export function ${1:SignIn}RouterConfig($stateProvider) {
	'ngInject';

	$stateProvider
		.state('${2:state.state}', {
			url: '/${3:url}',
			templateUrl: '${4:path/to/template}.html',
			controller: '$1Controller as vm',
		})
	;

}

endsnippet
#
#
#
#
#########################################
#
# Angular
#
#########################################
#
# Components
snippet ctrl
angular.module('${1:MyModule}').controller('${2:My}Controller', function(
	$scope
) {
	'use strict';

	${3:console.log('in $Controller');}

});

endsnippet
#
# Define a new module for an existing app
snippet $m
angular.module('${1:moduleName}', [${2:moduleDependencies}]);
endsnippet
#
# Call a service
snippet $s "Call a service method."
${1:NiftyService}.${2:methodName}(${3:params}).then((result) => {
	console.log('Result from $1.$2: ', result);
});${4}
endsnippet
#
# Define a filter
snippet filter "Define a filter (es6)" m
export function ${1:Foo}Filter() {
	'ngInject';

	return ${2:myFunction};


	/**
	 * ${3:My function}
	 *
	 * @param {String} input
	 * @return {String} output
	 */
	function $2(${4:input}) {

	}

}

endsnippet
#
# Use a filter
snippet $f "Use a filter"
$filter('${1:FilterName}')(${2:ItemToFilter}, '${3:Param}')${4}
endsnippet
#
# Get an element
snippet $el
angular.element( document.getElementById('${1}') );${2}
endsnippet
#
#
#
#
#########################################
#
# Utilities
#
#########################################
#
# Disable eslint for a specific rule
snippet disable "Disable ESLint for a specific rule"
/* eslint-disable ${1:camelcase} */
/* eslint-enable $1 */
endsnippet
#
# Disable eslint for a specific line
snippet disableline "Disable ESLint for a specific line and rule"
// eslint-disable-line ${1:camelcase}
endsnippet
#
# HTTP post
snippet httppost
$http.post(${1:URL}, ${2:obj})
	.success((data, status, headers, config) => {

		console.log('response: ', data);

	}).
	error((data, status, headers, config) => {

		console.error('error: ', data, status);

	});${3}
endsnippet
#
# HTTP get
snippet http "HTTP Get" m
$http.get(${1:URL})
	.success((data) => {

		console.log('response: ', data);

	})
	.error((data, status) => {

		console.error('error: ', data, status);

	});${2}
endsnippet
#
# HTTP get with promise
snippet httpprom "An HTTP Get wrapped with a promise" m
const deferred = this.$q.defer();

this.$http.get(${1:URL})
	.success((data) => {
		deferred.resolve(data);
	})
	.error((error) => {
		deferred.reject(error);
	});

return deferred.promise;${2}
endsnippet
#
# HTTP post with promise
snippet httppostprom "An HTTP Post wrapped in a promise" m
const deferred = this.$q.defer();

this.$http.post(${1:URL}, ${2:obj})
	.success((data, status, headers, config) => {
		deferred.resolve(data);
	})
	.error((error) => {
		deferred.reject(error);
	});

return deferred.promise;${3}
endsnippet
#
# angular.foreach loop
snippet ngfor
angular.forEach(${1:iterateOver}, (value, key) => {
	${2}
});
endsnippet
#
# Defines a new $scope'd variable
snippet $v
$scope.${1:variable} = ${2:value};
endsnippet
#
# Timeout
snippet ngtimeout
$timeout(() => {
}, ${1:1000});
endsnippet
snippet $t
$timeout(() => {
}, ${1:1000});
endsnippet
#
# Scope.Apply
snippet apply
$scope.$apply(() => {
});${1}
endsnippet
#
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
$scope.$watch('${1:watchExpr}', (newValue, oldValue) => {
	${2}
});
endsnippet
snippet scope.watch
$scope.$watch('${1:watchExpr}', (newValue, oldValue) => {
	${2}
});
endsnippet
#
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
$scope.$on('${1:eventName}', (event, ${2:args}) => {
	${3}
});
endsnippet
#
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
$scope.$broadcast('${1:eventName}', ${2:eventArgs});
endsnippet
#
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
$scope.$emit('${1:eventName}', ${2:eventArgs});
endsnippet
#
#
#
#
#
#
#########################################
#
# Vanilla JS
#
#########################################
#
#
#
#
#########################################
#
# Simple promise
#
#########################################
snippet promise
return this.$q((resolve, reject) => {
	resolve();
	reject();
});
endsnippet
#########################################
#
# Use strict
#
#########################################
snippet strict
'use strict';
endsnippet
#########################################
#
# Variable function
#
#########################################
snippet vfun
const ${1:myFunction} = function(${2}) {
	${3:console.log('hi');}
};${4}
endsnippet
#########################################
#
# Named function
#
#########################################
snippet fun
function ${1:function_name}(${2:argument}) {
	${3:// body...}
}
endsnippet
#########################################
#
# Anonymous function
#
#########################################
snippet f
function(${1}) {${2}};
endsnippet
#########################################
#
# Object method
#
#########################################
snippet :f
${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet
#########################################
#
# if
#
#########################################
snippet if
if (${1:true}) {
	${2}
}
endsnippet
#########################################
#
# if ... else
#
#########################################
snippet ife
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet
#########################################
#
# Ternary conditional
#
#########################################
snippet ift
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
snippet ternary
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
#
# switch
snippet switch "Switch statement" m
switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	default:
		${2:// code}
}
endsnippet
#
# for (...) {...}
snippet for
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: + 1}) {
	${4:$1[$2]}
};
endsnippet
#
# for (...) {...} (Improved Native For-Loop)
snippet forr
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: - 1}) {
	${4:$1[$2]}
};
endsnippet
#########################################
#
# Set Timeout
#
#########################################
snippet timeout
setTimeout(() => {
	${3}
}${2}, ${1:10});
endsnippet
#########################################
#
# Console Logs
#
#########################################
snippet cl
console.log('${1:Item}: ', ${2:results});${3}
endsnippet
snippet cls
console.log('${1:Log this}');${2}
endsnippet
snippet cln
console.log(JSON.stringify(${1:array}, null, 2));${2}
endsnippet
snippet cw
console.warn('${1:Item}: ', ${2:error});${3}
endsnippet
snippet ce
console.error('${1:Item}: ', ${2:error});${3}
endsnippet
#
# Log Debugs
snippet ld "Log string and object"
self.$log.debug('${1:My message}: ', ${2:MyParam});
endsnippet
snippet lds "Log string"
self.$log.debug('${1:My message}');
endsnippet
#
# Returns
snippet rf
return false;
endsnippet
snippet rt
return true;
endsnippet
#
# Event prevent default
snippet event
event.preventDefault;
endsnippet
#
# Local Storage
snippet ls
localStorage.${1:getItem}('${2:itemName}', JSON.${3:stringify/parse}(${4:Object}));${5}
endsnippet
# LocalStorage get
snippet lsget
JSON.parse(localStorage.getItem('${1:itemName}'));${2}
endsnippet
# LocalStorage set
snippet lsset
localStorage.setItem('${1:itemName}', JSON.stringify(${2:Object}));${3}
endsnippet
#
# Get Element by ID
snippet gett
document.getElementById('${1}');${2}
endsnippet
# Document ready
snippet ready
$(document).ready(() => {
		${1}
});
endsnippet
# Bind via .on
snippet on
$('${1:.foo}').on('${2:click}', '${4:a}', (event) => {
	${5}
});
endsnippet
#
#
#
#
# Comments
snippet funcom
/**
 * ${1:make() returns a new element}
 *
 * ${2:@param {String} tag}
 * ${3:@return {Element} element}
 */${4}
endsnippet

