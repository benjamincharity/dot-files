#
# ES6
#
# Controller Class
snippet controller "Create a controller class" m
class ${1:App}Controller {

    constructor() {
        'ngInject';

    }

}

export default $1Controller;

endsnippet
#
# Service Class
snippet service "Create a service class" m
class ${1:App}Service {

    constructor() {
        'ngInject';

    }

}

export default $1Service;

endsnippet
#
# Directive Class
snippet directive "Create a directive" m
function ${1:my}Directive(
) {
	'ngInject';

	const directive = {
		restrict: '${2:E}',
		scope: {},
		bindToController: {},
		templateUrl: '${3:/path/to/file}.html',
		link: linkFunction,
		controller: $1Controller,
		controllerAs: 'vm',
	};

	return directive;


	/**
	 * Link
	 */
	function linkFunction($scope, $element, $attr, vm) {

	}

}


/**
 * Controller
 */
function $1Controller() {

	this.yo = 'YOLO BROLO';

}


export default $1Directive;

endsnippet
#
# Define a directive
snippet $d
angular.module('${1:MyModule}').directive('${2:MyDirective}', function() {

	return {
		restrict: 'E',
		scope: {},
		bindToController: {},
		templateSrc: '${3:/path/to/file}.html',
		link: linkFunction,
		controller: '$2Controller',
		controllerAs: 'vm'
	};


	function linkFunction($scope, $element, $attr, vm) {
	}

	function $2Controller() {
	}

});

endsnippet
#
# Router
snippet router "Create a router" m
function ${1:my}RouterConfig($stateProvider) {
    'ngInject';

    $stateProvider
        .state('${2:app}', {
            url: '/${3:route}',
            templateUrl: 'app/${4:app/app}.html',
            controller: '${5:AppController}',
            controllerAs: 'vm',
        })
    ;

}

export default $1RouterConfig;

endsnippet
#
# Angular
#
# Components
snippet ctrl
angular.module('${1:MyModule}').controller('${2:My}Controller', function(
	$scope
) {
	'use strict';

	${3:console.log('in $Controller');}

});

endsnippet
#
# Define a new module for an existing app
snippet module
angular.module('${1:moduleName}', [${2:moduleDependencies}]);
endsnippet
#
# Call a service
snippet $s "Call a service method."
${1:NiftyService}.${2:methodName}(${3:params}).then(function(result) {
	console.log('Result from $1.$2: ', result);
});${4}
endsnippet
#
# Define a service with promises
#snippet $s "Define a new method on a service object." m
#${1:niftyService}.${2:methodName} = function(${3:params}) {

	#var deferred = $q.defer();

		#deferred.resolve(results);
		#deferred.reject(error);

	#return deferred.promise;

#};
#endsnippet
#
# Define a filter
snippet filter
angular.module('${1:MyModule}')
.filter('${2:MyFilter}', function() {

	return function(input) {

		return ${3:input};

	};

});
endsnippet
#
# Use a filter
snippet $f "Use a filter"
$filter('${1:FilterName}')(${2:ItemToFilter}, '${3:Param}')${4}
endsnippet
#
# Get an element
snippet $el
angular.element( document.getElementById('${1}') );${2}
endsnippet
#
#
#
#
#
#
#
#
# Utilities
#
#
# HTTP post
snippet httppost
$http.post(${1:URL}, ${2:obj})
	.success(function(data, status, headers, config) {

		console.log('response: ', data);

	}).
	error(function(data, status, headers, config) {

		console.error('error: ', data, status);

	});${3}
endsnippet
#
# HTTP get
snippet http "HTTP Get" m
$http.get(${1:URL})
	.success(function(data) {

		console.log('response: ', data);

	})
	.error(function(data, status) {

		console.error('error: ', data, status);

	});${2}
endsnippet
#
# HTTP get with promise
snippet httpprom "An HTTP Get wrapped with a promise" m
var deferred = $q.defer();

$http.get(${1:URL})
	.success(function(data) {

		deferred.resolve(data);

	})
	.error(function(data, status) {

		deferred.reject(status, ': ', data);

	});

return deferred.promise;${2}
endsnippet
#
# HTTP post with promise
snippet httppostprom "An HTTP Post wrapped in a promise" m
var deferred = $q.defer();

$http.post(${1:URL}, ${2:obj})
	.success(function(data, status, headers, config) {

		deferred.resolve(data);

	})
	.error(function(data, status) {

		deferred.reject(status, ': ', data);

	});

return deferred.promise;${3}
endsnippet
#
# angular.foreach loop
snippet ngfor
angular.forEach(${1:iterateOver}, function(value, key) {
	${2}
});
endsnippet
#
# Define a new $scope'd function
#snippet $f
#$scope.${1:functionName} = function(${2:args}) {
	#${3}
#};
#endsnippet
#
# Defines a new $scope'd variable
snippet $v
$scope.${1:variable} = ${2:value};
endsnippet
#
# Timeout
snippet ngtimeout
$timeout(function() {
}, ${1:1000});
endsnippet
snippet $t
$timeout(function() {
}, ${1:1000});
endsnippet
#
# Scope.Apply
snippet apply
$scope.$apply(function() {
});${1}
endsnippet
#
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
	${2}
});
endsnippet
snippet scope.watch
$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
	${2}
});
endsnippet
#
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
$scope.$on('${1:eventName}', function(event, ${2:args}) {
	${3}
});
endsnippet
#
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
$scope.$broadcast('${1:eventName}', ${2:eventArgs});
endsnippet
#
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
$scope.$emit('${1:eventName}', ${2:eventArgs});
endsnippet
#
#
#
#
#
#
#
#
# Vanilla JS
#
# Use strict statement
snippet strict
'use strict';
endsnippet
# Variable function
snippet vfun
var ${1:myFunction} = function(${2}) {
	${3:console.log('hi');}
};${4}
endsnippet
#
# Function
snippet fun
function ${1:function_name}(${2:argument}) {
	${3:// body...}
}
endsnippet
#
# Anonymous Function
snippet f
function(${1}) {${2}};
endsnippet
#
# Object Method
snippet :f
${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet
#
# if
snippet if
if (${1:true}) {
	${2}
}
endsnippet
#
# if ... else
snippet ife
if (${1:true}) {
	${2}
} else {
	${3}
}
endsnippet
#
# Ternary conditional
snippet ift
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
snippet ternary
${1:thingToTest} ? ${2:doIfTrue} : ${3:doIfFalse};
endsnippet
#
# switch
snippet switch "Switch statement" m
switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	default:
		${2:// code}
}
endsnippet
#
# for (...) {...}
snippet for
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: + 1}) {
	${4:$1[$2]}
};
endsnippet
#
# for (...) {...} (Improved Native For-Loop)
snippet forr
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: - 1}) {
	${4:$1[$2]}
};
endsnippet
#
# setTimeout function
snippet timeout
setTimeout(function() {
	${3}
}${2}, ${1:10});
endsnippet
#
# Console Logs
snippet cl
console.log('${1:Item}: ', ${2:results});${3}
endsnippet
snippet cls
console.log('${1:Log this}');${2}
endsnippet
snippet cln
console.log(JSON.stringify(${1:array}, null, 2));${2}
endsnippet
snippet cw
console.warn('${1:Item}: ', ${2:error});${3}
endsnippet
snippet ce
console.error('${1:Item}: ', ${2:error});${3}
endsnippet
#
# Log Debugs
snippet ld "Log string and object"
self.$log.debug('${1:My message}: ', ${2:MyParam});
endsnippet
snippet lds "Log string"
self.$log.debug('${1:My message}');
endsnippet
#
# Returns
snippet rf
return false;
endsnippet
snippet rt
return true;
endsnippet
#
# Event prevent default
snippet event
event.preventDefault;
endsnippet
#
# Local Storage
snippet ls
localStorage.${1:getItem}('${2:itemName}', JSON.${3:stringify/parse}(${4:Object}));${5}
endsnippet
# LocalStorage get
snippet lsget
JSON.parse(localStorage.getItem('${1:itemName}'));${2}
endsnippet
# LocalStorage set
snippet lsset
localStorage.setItem('${1:itemName}', JSON.stringify(${2:Object}));${3}
endsnippet
#
# Get Element by ID
snippet gett
document.getElementById('${1}');${2}
endsnippet
# Document ready
snippet ready
$(document).ready(function() {
		${1}
});
endsnippet
# Bind via .on
snippet on
$('${1:.foo}').on('${2:click}', '${4:a}', function(event) {
	${5}
});
endsnippet
#
#
#
#
# Comments
snippet funcom
/**
 * ${1:make() returns a new element}
 *
 * ${2:@param {String} tag}
 * ${3:@return {Element} element}
 */${4}
endsnippet
#
#
#
#
# SuperSonic
#
# Supersonic log
snippet sl
supersonic.logger.log(${1:'Log this'});${2}
endsnippet
snippet sready
supersonic.device.ready.then(function() {
});
endsnippet
snippet whenReady "On ready function for steroids" m
supersonic.device.ready.then(function() {
});
endsnippet
snippet whenVisible "When visible function for steroids" m
//
// When the view becomes visible
supersonic.ui.views.current.whenVisible(function() {
	$scope.$apply(function() {
	});
});
endsnippet
# when hidden
snippet whenHidden "When hidden function for steroids" m
//
// When the view is hidden
supersonic.ui.views.current.whenHidden(function() {
	$scope.$apply(function() {
	});
});
endsnippet
# publish
snippet publish "Publish data to a Supersonic channel" m
supersonic.data.channel('${1:ChannelName}').publish(${2:data});
endsnippet
# subscribe
snippet subscribe "Subscribe to a Supersonic channel" m
supersonic.data.channel('${1:ChannelName}').subscribe(function(${2:receivedData}) {
	$scope.$apply(function() {
	});
});
endsnippet
# pop a view
snippet pop "Pop a supersonic layer"
supersonic.ui.layers.pop();
endsnippet
# Hide modal
snippet hidemodal "Dismiss a supersonic modal"
supersonic.ui.modal.hide();
endsnippet
#
#
